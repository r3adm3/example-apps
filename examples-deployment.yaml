---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: example
  labels:
    name: example

---
# .NET Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-dotnet
  namespace: example
  labels:
    app: example-dotnet
    language: dotnet
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example-dotnet
  template:
    metadata:
      labels:
        app: example-dotnet
        language: dotnet
    spec:
      containers:
      - name: example-dotnet
        image: example-dotnet:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# .NET Service
apiVersion: v1
kind: Service
metadata:
  name: example-dotnet-service
  namespace: example
  labels:
    app: example-dotnet
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: example-dotnet

---
# Go Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-go
  namespace: example
  labels:
    app: example-go
    language: go
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example-go
  template:
    metadata:
      labels:
        app: example-go
        language: go
    spec:
      containers:
      - name: example-go
        image: example-go:latest
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /hello
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /hello
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Go Service
apiVersion: v1
kind: Service
metadata:
  name: example-go-service
  namespace: example
  labels:
    app: example-go
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: example-go

---
# Java Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-java
  namespace: example
  labels:
    app: example-java
    language: java
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example-java
  template:
    metadata:
      labels:
        app: example-java
        language: java
    spec:
      containers:
      - name: example-java
        image: example-java:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: JAVA_OPTS
          value: "-Xms128m -Xmx256m"
        livenessProbe:
          httpGet:
            path: /status
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /status
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5

---
# Java Service
apiVersion: v1
kind: Service
metadata:
  name: example-java-service
  namespace: example
  labels:
    app: example-java
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: example-java

---
# Node.js Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-node
  namespace: example
  labels:
    app: example-node
    language: nodejs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-node
  template:
    metadata:
      labels:
        app: example-node
        language: nodejs
    spec:
      containers:
      - name: example-node
        image: example-node:latest
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        env:
        - name: NODE_ENV
          value: "production"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Node.js Service
apiVersion: v1
kind: Service
metadata:
  name: example-node-service
  namespace: example
  labels:
    app: example-node
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: example-node

---
# Python Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-python
  namespace: example
  labels:
    app: example-python
    language: python
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example-python
  template:
    metadata:
      labels:
        app: example-python
        language: python
    spec:
      containers:
      - name: example-python
        image: example-python:latest
        ports:
        - containerPort: 8000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        env:
        - name: FLASK_ENV
          value: "production"
        - name: PYTHONUNBUFFERED
          value: "1"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Python Service
apiVersion: v1
kind: Service
metadata:
  name: example-python-service
  namespace: example
  labels:
    app: example-python
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app: example-python

